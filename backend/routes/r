import express from 'express';
import jwt from 'jsonwebtoken';
import { DateTime } from 'luxon';
import MonthlyBonusReport from '../models/MonthlyBonusReport.js';
import User from '../models/User.js';
import Fingerprint from '../models/Fingerprint.js';

const router = express.Router();

// التحقق من التوكن وصلاحية الأدمن
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) {
    console.error('No token provided in request');
    return res.status(401).json({ message: 'غير مصرح' });
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (decoded.role !== 'admin') {
      console.error('User is not admin:', decoded);
      return res.status(403).json({ message: 'للأدمن فقط' });
    }
    req.user = decoded;
    next();
  } catch (error) {
    console.error('Invalid token:', error.message);
    return res.status(401).json({ message: 'توكن غير صالح', details: error.message });
  }
};

// دالة لحساب صافي المكافأة
const calculateNetBonus = (baseBonus, bonusPercentage, absences, tieUpValue, productionValue, advances, deductions) => {
  const bonus = Number(baseBonus || 0) * (Number(bonusPercentage || 0) / 100);
  const dailyBonus = bonus / 30;
  const absenceDeduction = Number(absences || 0) * dailyBonus;
  const adjustedBonus = bonus - absenceDeduction;
  const netBonus = adjustedBonus + Number(tieUpValue || 0) + Number(productionValue || 0) - Number(advances || 0) - Number(deductions || 0);
  return Math.max(0, netBonus).toFixed(2);
};

// دالة لحساب بيانات الحضور من Fingerprint
const calculateAttendanceStats = async (code, startDate, endDate) => {
  try {
    const fingerprints = await Fingerprint.find({
      code,
      date: { $gte: startDate.toJSDate(), $lte: endDate.toJSDate() },
    });

    const user = await User.findOne({ code });
    if (!user) {
      throw new Error(`لا يوجد مستخدم بكود ${code}`);
    }

    const workDaysPerWeek = user.workDaysPerWeek || 6;
    const isWeeklyLeaveDay = (date) => {
      const dayOfWeek = DateTime.fromJSDate(date, { zone: 'Africa/Cairo' }).weekday;
      return (workDaysPerWeek === 5 && (dayOfWeek === 5 || dayOfWeek === 6)) ||
             (workDaysPerWeek === 6 && dayOfWeek === 5);
    };

    let totalWorkDays = 0;
    let absences = 0;
    let annualLeave = 0;

    fingerprints.forEach((fp) => {
      const isWorkDay = !fp.absence &&
                        !fp.annualLeave &&
                        !fp.medicalLeave &&
                        !fp.officialLeave &&
                        fp.leaveCompensation === 0 &&
                        fp.appropriateValue === 0 &&
                        !isWeeklyLeaveDay(fp.date);
      if (isWorkDay) totalWorkDays += 1;
      if (fp.absence) absences += 1;
      if (fp.annualLeave) annualLeave += 1;
    });

    const totalLeaveDays = annualLeave + fingerprints.filter(fp => fp.medicalLeave || fp.officialLeave).length;

    return { totalWorkDays, absences, annualLeave, totalLeaveDays };
  } catch (error) {
    console.error(`Error calculating attendance stats for code ${code}:`, error.message);
    throw error;
  }
};

// جلب جميع التقارير أو تقرير لموظف معين
router.get('/', authMiddleware, async (req, res) => {
  try {
    const { code, dateFrom, dateTo } = req.query;

    console.log('GET /api/bonus-reports received:', { code, dateFrom, dateTo });

    if (!dateFrom || !dateTo) {
      console.error('Missing dateFrom or dateTo:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية والنهاية مطلوبان' });
    }

    const startDate = DateTime.fromISO(dateFrom, { zone: 'Africa/Cairo' });
    const endDate = DateTime.fromISO(dateTo, { zone: 'Africa/Cairo' });
    if (!startDate.isValid || !endDate.isValid) {
      console.error('Invalid date format:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية أو النهاية غير صالح' });
    }
    if (startDate > endDate) {
      console.error('Start date is after end date:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية يجب أن يكون قبل تاريخ النهاية' });
    }

    let query = {
      dateFrom: startDate.startOf('day').toJSDate(),
      dateTo: endDate.endOf('day').toJSDate(),
    };
    if (code) query.code = code;

    let reports = await MonthlyBonusReport.find(query);
    if (!reports || reports.length === 0) {
      const users = code
        ? await User.find({ code })
        : await User.find({ status: 'active' });

      if (users.length === 0) {
        console.error('No users found for query:', { code });
        return res.status(404).json({ error: 'لا يوجد مستخدمين مطابقين' });
      }

      reports = await Promise.all(users.map(async (user) => {
        const attendanceStats = await calculateAttendanceStats(user.code, startDate, endDate);
        return {
          code: user.code,
          employeeName: user.fullName,
          department: user.department,
          baseBonus: user.baseBonus || 0,
          bonusPercentage: user.bonusPercentage || 0,
          workDaysPerWeek: user.workDaysPerWeek || 6,
          totalWorkDays: attendanceStats.totalWorkDays,
          absences: attendanceStats.absences,
          annualLeave: attendanceStats.annualLeave,
          totalLeaveDays: attendanceStats.totalLeaveDays,
          tieUpValue: 0,
          productionValue: 0,
          advances: user.advances || 0,
          deductions: 0,
          netBonus: calculateNetBonus(
            user.baseBonus || 0,
            user.bonusPercentage || 0,
            attendanceStats.absences,
            0,
            0,
            user.advances || 0,
            0
          ),
          dateFrom: startDate.toJSDate(),
          dateTo: endDate.toJSDate(),
        };
      }));
    }

    console.log(`Fetched ${reports.length} reports for query:`, query);
    res.json({ reports });
  } catch (error) {
    console.error('Error fetching reports:', error.message);
    res.status(500).json({ error: 'خطأ في جلب التقارير', details: error.message });
  }
});

// إنشاء تقرير جديد
router.post('/', authMiddleware, async (req, res) => {
  try {
    const { code, dateFrom, dateTo, tieUpValue, productionValue, advances, deductions } = req.body;

    console.log('POST /api/bonus-reports received:', { code, dateFrom, dateTo });

    if (!code || !dateFrom || !dateTo) {
      console.error('Missing required fields:', { code, dateFrom, dateTo });
      return res.status(400).json({ error: 'كود الموظف وتاريخ البداية والنهاية مطلوبة' });
    }

    const startDate = DateTime.fromISO(dateFrom, { zone: 'Africa/Cairo' });
    const endDate = DateTime.fromISO(dateTo, { zone: 'Africa/Cairo' });
    if (!startDate.isValid || !endDate.isValid) {
      console.error('Invalid date format:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية أو النهاية غير صالح' });
    }
    if (startDate > endDate) {
      console.error('Start date is after end date:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية يجب أن يكون قبل تاريخ النهاية' });
    }

    const user = await User.findOne({ code });
    if (!user) {
      console.error(`User not found for code ${code}`);
      return res.status(404).json({ error: 'المستخدم غير موجود' });
    }

    const attendanceStats = await calculateAttendanceStats(code, startDate, endDate);

    const existingReport = await MonthlyBonusReport.findOne({
      code,
      dateFrom: startDate.startOf('day').toJSDate(),
      dateTo: endDate.endOf('day').toJSDate(),
    });
    if (existingReport) {
      console.error(`Report already exists for code ${code} from ${dateFrom} to ${dateTo}`);
      return res.status(400).json({ error: 'تقرير موجود مسبقًا لهذا الموظف في هذه الفترة' });
    }

    const report = new MonthlyBonusReport({
      code,
      employeeName: user.fullName || 'غير معروف',
      department: user.department || '',
      baseBonus: user.baseBonus || 0,
      bonusPercentage: user.bonusPercentage || 0,
      workDaysPerWeek: user.workDaysPerWeek || 6,
      totalWorkDays: attendanceStats.totalWorkDays,
      absences: attendanceStats.absences,
      annualLeave: attendanceStats.annualLeave,
      totalLeaveDays: attendanceStats.totalLeaveDays,
      tieUpValue: Number(tieUpValue) || 0,
      productionValue: Number(productionValue) || 0,
      advances: Number(advances) || user.advances || 0,
      deductions: Number(deductions) || 0,
      netBonus: calculateNetBonus(
        user.baseBonus || 0,
        user.bonusPercentage || 0,
        attendanceStats.absences,
        Number(tieUpValue) || 0,
        Number(productionValue) || 0,
        Number(advances) || user.advances || 0,
        Number(deductions) || 0
      ),
      dateFrom: startDate.toJSDate(),
      dateTo: endDate.toJSDate(),
      createdBy: req.user.id,
    });

    await report.save();
    console.log(`Created report for code ${code} from ${dateFrom} to ${dateTo}`);
    res.status(201).json({ message: 'تم حفظ التقرير بنجاح', report });
  } catch (error) {
    console.error('Error saving report:', error.message);
    res.status(500).json({ error: 'خطأ في حفظ التقرير', details: error.message });
  }
});

// تحديث تقرير
router.put('/:code', authMiddleware, async (req, res) => {
  try {
    const { code } = req.params;
    const { dateFrom, dateTo, tieUpValue, productionValue, advances, deductions } = req.body;

    console.log('PUT /api/bonus-reports/:code received:', { code, dateFrom, dateTo, body: req.body });

    if (!dateFrom || !dateTo) {
      console.error('Missing dateFrom or dateTo:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية والنهاية مطلوبان' });
    }

    const startDate = DateTime.fromISO(dateFrom, { zone: 'Africa/Cairo' });
    const endDate = DateTime.fromISO(dateTo, { zone: 'Africa/Cairo' });
    if (!startDate.isValid || !endDate.isValid) {
      console.error('Invalid date format:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية أو النهاية غير صالح' });
    }
    if (startDate > endDate) {
      console.error('Start date is after end date:', { dateFrom, dateTo });
      return res.status(400).json({ error: 'تاريخ البداية يجب أن يكون قبل تاريخ النهاية' });
    }

    // التحقق من القيم الرقمية
    if (tieUpValue !== undefined && Number(tieUpValue) < 0) {
      console.error('Negative tieUpValue:', tieUpValue);
      return res.status(400).json({ error: 'قيمة التربيط يجب ألا تكون سالبة' });
    }
    if (productionValue !== undefined && Number(productionValue) < 0) {
      console.error('Negative productionValue:', productionValue);
      return res.status(400).json({ error: 'قيمة الإنتاج يجب ألا تكون سالبة' });
    }
    if (advances !== undefined && Number(advances) < 0) {
      console.error('Negative advances:', advances);
      return res.status(400).json({ error: 'السلف يجب ألا تكون سالبة' });
    }
    if (deductions !== undefined && Number(deductions) < 0) {
      console.error('Negative deductions:', deductions);
      return res.status(400).json({ error: 'الاستقطاعات يجب ألا تكون سالبة' });
    }

    const report = await MonthlyBonusReport.findOne({
      code,
      dateFrom: startDate.startOf('day').toJSDate(),
      dateTo: endDate.endOf('day').toJSDate(),
    });

    if (!report) {
      const user = await User.findOne({ code });
      if (!user) {
        console.error(`User not found for code ${code}`);
        return res.status(404).json({ error: 'المستخدم غير موجود' });
      }

      const attendanceStats = await calculateAttendanceStats(code, startDate, endDate);

      const newReport = new MonthlyBonusReport({
        code,
        employeeName: user.fullName || 'غير معروف',
        department: user.department || '',
        baseBonus: user.baseBonus || 0,
        bonusPercentage: user.bonusPercentage || 0,
        workDaysPerWeek: user.workDaysPerWeek || 6,
        totalWorkDays: attendanceStats.totalWorkDays,
        absences: attendanceStats.absences,
        annualLeave: attendanceStats.annualLeave,
        totalLeaveDays: attendanceStats.totalLeaveDays,
        tieUpValue: Number(tieUpValue) || 0,
        productionValue: Number(productionValue) || 0,
        advances: Number(advances) || user.advances || 0,
        deductions: Number(deductions) || 0,
        netBonus: calculateNetBonus(
          user.baseBonus || 0,
          user.bonusPercentage || 0,
          attendanceStats.absences,
          Number(tieUpValue) || 0,
          Number(productionValue) || 0,
          Number(advances) || user.advances || 0,
          Number(deductions) || 0
        ),
        dateFrom: startDate.toJSDate(),
        dateTo: endDate.toJSDate(),
        createdBy: req.user.id,
      });

      await newReport.save();
      console.log(`Created new report for code ${code} from ${dateFrom} to ${dateTo}`);
      return res.status(201).json({ message: 'تم إنشاء التقرير بنجاح', report: newReport });
    }

    const attendanceStats = await calculateAttendanceStats(code, startDate, endDate);
    const updatedFields = {
      tieUpValue: tieUpValue !== undefined ? Number(tieUpValue) : report.tieUpValue,
      productionValue: productionValue !== undefined ? Number(productionValue) : report.productionValue,
      advances: advances !== undefined ? Number(advances) : report.advances,
      deductions: deductions !== undefined ? Number(deductions) : report.deductions,
      totalWorkDays: attendanceStats.totalWorkDays,
      absences: attendanceStats.absences,
      annualLeave: attendanceStats.annualLeave,
      totalLeaveDays: attendanceStats.totalLeaveDays,
      updatedBy: req.user.id,
      netBonus: calculateNetBonus(
        report.baseBonus,
        report.bonusPercentage,
        attendanceStats.absences,
        tieUpValue !== undefined ? Number(tieUpValue) : report.tieUpValue,
        productionValue !== undefined ? Number(productionValue) : report.productionValue,
        advances !== undefined ? Number(advances) : report.advances,
        deductions !== undefined ? Number(deductions) : report.deductions
      ),
    };

    const updatedReport = await MonthlyBonusReport.findOneAndUpdate(
      {
        code,
        dateFrom: startDate.startOf('day').toJSDate(),
        dateTo: endDate.endOf('day').toJSDate(),
      },
      { $set: updatedFields },
      { new: true }
    );

    console.log(`Updated report for code ${code} from ${dateFrom} to ${dateTo}: netBonus=${updatedReport.netBonus}`);
    res.json({ message: 'تم تحديث التقرير بنجاح', report: updatedReport });
  } catch (error) {
    console.error('Error updating report:', error.message);
    res.status(500).json({ error: 'خطأ في تحديث التقرير', details: error.message });
  }
});

export default router;
